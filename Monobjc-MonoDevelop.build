<?xml version="1.0"?>
<project name="Monobjc MonoDevelop" default="package" basedir=".">
  <description>Monobjc MonoDevelop Build File</description>

  <property name="configuration" value="Release" overwrite="false"/>

  <!-- Define some properties if they are missing -->
  <property name="addins.dir" value="${path::get-full-path('./addins')}"/>
  <property name="tools.dir" value="${path::get-full-path('./tools')}"/>
  <property name="build.dir" value="${path::get-full-path('./build')}"/>
  <property name="dist.dir" value="${path::get-full-path('./dist')}"/>
  <property name="binaries.dir" value="${dist.dir}" unless="${property::exists('binaries.dir')}"/>
  <property name="repository.dir" value="${dist.dir}/repository"/>

  <!-- Define some properties related to MonoDevelop -->
  <property name="md.app" value="/Applications/MonoDevelop.app-2.6" unless="${property::exists('md.app')}"/>
  <property name="md.version" value="2.6" unless="${property::exists('md.version')}"/>
  <property name="md.config" value="${md.app}/Contents/MacOS/lib/pkgconfig"/>
  <property name="md.tool" value="${md.app}/Contents/MacOS/mdtool"/>

  <!-- Load the properties -->
  <include buildfile="profile-${md.version}.config"/>

  <!-- ===============================================================================
  Build the tools libraries
  ================================================================================ -->
  <target name="build-tools" depends="prepare">
    <nant buildfile="${tools.dir}/Monobjc-Tools.build" inheritall="true"/>
  </target>

  <!-- ===============================================================================
  Build the addins libraries
  ================================================================================ -->
  <target name="build-addins" depends="build-tools">
    <!-- Update the addin descriptors with the versions -->
    <property name="build.version" value="${revision}"/>
    <property name="build.number" value="0" unless="${property::exists('build.number')}"/>
    <call target="gen-projects" />
    <call target="gen-descriptors" />

    <!-- Make sure that MonoDevelop is found -->
    <fail message="MonoDevelop installation not found. Check the 'md.app' property." unless="${directory::exists(md.app)}" />

    <!-- Builds the addins -->
    <exec workingdir="."
          program="xbuild"
          failonerror="true"
          commandline="/property:Configuration=${configuration}">
      <environment>
        <!-- Make sure that we use our own pkg-config files -->
        <variable name="PKG_CONFIG_PATH" value="PKG_CONFIG_PATH:${md.config}"/>
      </environment>
    </exec>
  </target>

  <!-- ===============================================================================
  Package the addins libraries
  ================================================================================ -->

  <target name="package" depends="build-addins">
    <!-- Copy the material that will form the addins -->
    <call target="copy-descriptors" />
    <call target="copy-addins" />

    <!-- Invoke the mdtool to generate the respository -->
    <call target="pack-addins" />

    <!-- Build repository -->
    <call target="build-repository" />
  </target>

  <!-- *************************************************************************** -->

  <!-- Prepare the directories -->
  <target name="prepare">
    <mkdir dir="${build.dir}"/>
    <mkdir dir="${dist.dir}"/>
    <mkdir dir="${repository.dir}"/>

    <!-- Compute the revision -->
    <property name="revision" value="${timespan::get-days(datetime::now() - datetime::parse('2007-07-01'))}"/>
  </target>

  <!-- *************************************************************************** -->

  <!-- Clean the directories -->
  <target name="clean">
    <delete dir="${build.dir}" failonerror="false" />
    <delete dir="${dist.dir}" failonerror="false" />

    <!-- Revert descriptors -->
    <property name="build.version" value="9999"/>
    <property name="build.number" value="0"/>
    <call target="gen-projects" />
    <call target="gen-descriptors" />

    <!-- Clean the addins -->
    <exec workingdir="."
          program="xbuild"
          failonerror="true"
          commandline="/property:Configuration=${configuration} /target:clean">
      <environment>
        <!-- Make sure that we use our own pkg-config files -->
        <variable name="PKG_CONFIG_PATH" value="PKG_CONFIG_PATH:${md.config}"/>
      </environment>
    </exec>

    <!-- Clean sub-projects -->
    <nant buildfile="${tools.dir}/Monobjc-Tools.build" target="clean"/>
  </target>

  <!-- *************************************************************************** -->

  <!-- Generate the addin.xml descriptors -->
  <target name="gen-projects">
    <foreach item="File" property="filename">
      <in>
        <items>
          <include name="${addins.dir}/**/*.csproj.tmpl" />
        </items>
      </in>
      <do>
        <copy file="${filename}" tofile="${directory::get-parent-directory(filename)}/${path::get-file-name-without-extension(filename)}" overwrite="true">
          <filterchain>
            <replacetokens>
              <token key="MONO_FRAMEWORK" value="${mono.framework}" />
              <token key="MONO_ADDINS" value="${mono.addins}" />
              <token key="MONO_CECIL" value="${mono.cecil}" />
							
              <token key="MD_DEFINE" value="${md.define}" />
              <token key="MD_GAC_REFERENCE" value="${md.gac.reference}" />
            </replacetokens>
          </filterchain>
        </copy>
      </do>
    </foreach>
  </target>

  <!-- Generate the addin.xml descriptors -->
  <target name="gen-descriptors">
    <foreach item="File" property="filename">
      <in>
        <items>
          <include name="${addins.dir}/**/addin.xml.tmpl" />
        </items>
      </in>
      <do>
	    <property name="addin.xml" value="${directory::get-parent-directory(filename)}/${path::get-file-name-without-extension(filename)}"/>
	    <loadfile property="addin.specific" file="${addin.xml}.${md.version}" failonerror="false"/>
        <property name="addin.specific" value=" " unless="${property::exists('addin.specific')}"/>
        <copy file="${filename}" tofile="${addin.xml}" overwrite="true">
          <filterchain>
            <replacetokens>
              <token key="ADDIN_VERSION" value="${md.version}.${build.version}.${build.number}" />							
              <token key="ADDIN_SPECIFIC" value="${addin.specific}" />

              <token key="MD_VERSION" value="${md.version}" />
              <token key="MD_ADDINS_REFERENCE" value="${md.addins.reference}" />
            </replacetokens>
          </filterchain>
        </copy>
      </do>
    </foreach>
  </target>

  <!-- *************************************************************************** -->

  <!-- Copy the addin.xml descriptors -->
  <target name="copy-descriptors">
    <foreach item="File" property="filename">
      <in>
        <items>
          <include name="${addins.dir}/**/addin.xml" />
        </items>
      </in>
      <do>
        <property name="addin" value="${directory::get-parent-directory(filename)}"/>
        <copy file="${filename}" tofile="${build.dir}/${path::get-file-name(addin)}.addin.xml"/>
      </do>
    </foreach>
  </target>

  <!-- *************************************************************************** -->

  <!-- Generate the addins content -->
  <target name="copy-addins">
    <foreach item="Folder" property="folder">
      <in>
        <items>
          <include name="${addins.dir}/**/${configuration}" />
        </items>
      </in>
      <do>
        <copy todir="${build.dir}">
          <fileset basedir="${folder}">
            <include name="*.dll"/>
            <include name="*.mdb"/>
            <include name="**/*.png"/>
            <include name="**/*.xpt.xml"/>
            <include name="**/*.xft.xml"/>
          </fileset>
        </copy>
      </do>
    </foreach>
  </target>

  <!-- *************************************************************************** -->

  <!-- Pack the addins -->
  <target name="pack-addins">
    <foreach item="File" property="filename">
      <in>
        <items>
          <include name="${build.dir}/*.xml" />
        </items>
      </in>
      <do>
        <exec workingdir="."
              program="${md.tool}"
              failonerror="true"
              commandline="setup pack ${filename} -d:${repository.dir}">
        </exec>
      </do>
    </foreach>
  </target>

  <!-- *************************************************************************** -->

  <!-- Build the repository -->
  <target name="build-repository">
    <exec workingdir="."
          program="${md.tool}"
          failonerror=" true"
          commandline="setup rep-build ${repository.dir}">
    </exec>
  </target>

</project>
