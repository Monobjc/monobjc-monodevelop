//
// This file is part of Monobjc, a .NET/Objective-C bridge
// Copyright (C) 2007-2011 - Laurent Etiemble
//
// Monobjc is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// any later version.
//
// Monobjc is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Monobjc.  If not, see <http://www.gnu.org/licenses/>.
//
using System;
using System.Collections.Generic;
using System.IO;
using MonoDevelop.Monobjc.Utilities;
using MonoDevelop.Projects;
using MonoDevelop.Core;

#if MD_2_6 || MD_2_8
using MonoDevelop.Projects.Dom;
#endif
#if MD_3_0
using ICSharpCode.NRefactory.TypeSystem;
#endif

namespace MonoDevelop.Monobjc.Tracking
{
	public abstract class ObjectiveCWriter
	{
		protected MonobjcProject project;
		protected ProjectResolver resolver;
		
		protected ObjectiveCWriter (MonobjcProject project)
		{
			this.project = project;
			this.resolver = new ProjectResolver (this.project);
		}
		
		public void Write (TextWriter writer, IType type)
		{
			IType baseType = this.GetBaseType(type);
			String name = type.Name;
			String baseName = (baseType != null) ? baseType.Name : "NSObject";
			
			WriteHeader (writer);
			WriteIncludes (writer, type);
			
			WritePrologue (writer, name, baseName);
			WriteProperties (writer, type);
			WriteMethods (writer, type);
			WriteEpilogue (writer, name, baseName);
		}
		
		protected void WriteHeader (TextWriter writer)
		{
			writer.WriteLine ("//");
			writer.WriteLine ("// Generated by Monobjc MonoDevelop Addin");
			writer.WriteLine ("//");
		}
		
		protected void WriteIncludes (TextWriter writer, IType type)
		{
			foreach (String framework in this.project.OSFrameworks.Split(';')) {
				writer.WriteLine ("#import <{0}/{0}.h>", framework);
			}
			IType baseType = this.GetBaseType(type);
			if (this.NeedImport(baseType)) {
				writer.WriteLine ("#import \"{0}.h\"", baseType.Name);
			}
			foreach (String import in this.GetOtherImports(type)) {
				writer.WriteLine (import);
			}
			writer.WriteLine ();
		}
		
		protected abstract void WritePrologue (TextWriter writer, String name, String baseName);
		
		protected abstract void WriteProperties (TextWriter writer, IType type);
		
		protected abstract void WriteMethods (TextWriter writer, IType type);
		
		protected abstract void WriteEpilogue (TextWriter writer, String name, String baseName);
		
		protected abstract IEnumerable<String> GetOtherImports (IType type);
		
		protected IEnumerable<IProperty> GetProperties (IType type)
		{
			IList<IProperty> properties = new List<IProperty> ();
#if MD_2_6 || MD_2_8
			IEnumerable<IProperty> typeProperties = type.Properties;
#endif
#if MD_3_0
			IEnumerable<IProperty> typeProperties = type.GetProperties((p)=>true, GetMemberOptions.None);
#endif
			foreach (IProperty property in typeProperties) {
				if (!AttributeHelper.HasAttribute (property, AttributeHelper.IBOUTLET)) {
					continue;
				}
				if (!AttributeHelper.HasAttribute (property, AttributeHelper.OBJECTIVE_C_IVAR)) {
					continue;
				}
				properties.Add (property);
			}
			return properties;
		}
		
		protected IEnumerable<IMethod> GetMethods (IType type)
		{
			IList<IMethod> methods = new List<IMethod> ();
#if MD_2_6 || MD_2_8
			IEnumerable<IMethod> typeMethods = type.Methods;
#endif
#if MD_3_0
			IEnumerable<IMethod> typeMethods = type.GetMethods((m)=>true, GetMemberOptions.None);
#endif
			foreach (IMethod method in typeMethods) {
				if (!AttributeHelper.HasAttribute (method, AttributeHelper.IBACTION)) {
					continue;
				}
				if (!AttributeHelper.HasAttribute (method, AttributeHelper.OBJECTIVE_C_MESSAGE)) {
					continue;
				}
				if (method.Parameters.Count != 1) {
					continue;
				}
				methods.Add (method);
			}
			return methods;
		}
		
		protected IType GetBaseType (IType type)
		{
			// Search for the base class type
#if MD_2_6 || MD_2_8
			IEnumerable<IReturnType> typeBaseTypes = type.BaseTypes;
#endif
#if MD_3_0
			IEnumerable<IType> typeBaseTypes = type.GetAllBaseTypes();
#endif
			foreach (var baseType in typeBaseTypes) {
				IType resolvedBaseType = this.resolver.ResolveType(baseType);
				if (resolvedBaseType == null) {
					continue;
				}
#if MD_2_6 || MD_2_8
				if (resolvedBaseType.ClassType != ClassType.Class) {
					continue;
				}
#endif
#if MD_3_0
				if (resolvedBaseType.Kind != TypeKind.Class) {
					continue;
				}
#endif
				return resolvedBaseType;
			}
			return null;
		}
		
		protected bool NeedImport (IType type)
		{
			return this.resolver.IsInProject(type);
		}
	}
}
