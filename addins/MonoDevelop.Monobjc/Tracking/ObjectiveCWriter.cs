//
// This file is part of Monobjc, a .NET/Objective-C bridge
// Copyright (C) 2007-2011 - Laurent Etiemble
//
// Monobjc is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// any later version.
//
// Monobjc is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Monobjc.  If not, see <http://www.gnu.org/licenses/>.
//
using System;
using System.Collections.Generic;
using System.IO;
using ICSharpCode.NRefactory.TypeSystem;
using MonoDevelop.Monobjc.Utilities;

namespace MonoDevelop.Monobjc.Tracking
{
	public abstract class ObjectiveCWriter
	{
		protected MonobjcProject project;
		protected ProjectTypeCache cache;

		protected ObjectiveCWriter (MonobjcProject project)
		{
			this.project = project;
			this.cache = ProjectTypeCache.Get(this.project);
		}
		
		public void Write (TextWriter writer, IType type)
		{
			IType baseType = this.GetBaseType (type);
			String name = type.Name;
			String baseName = (baseType != null) ? baseType.Name : "NSObject";
			
			this.WriteHeader (writer);
			this.WriteIncludes (writer, type);
			
			this.WritePrologue (writer, name, baseName);
			this.WriteProperties (writer, type);
			this.WriteMethods (writer, type);
			this.WriteEpilogue (writer, name, baseName);
		}
		
		protected void WriteHeader (TextWriter writer)
		{
			writer.WriteLine ("//");
			writer.WriteLine ("// Generated by Monobjc MonoDevelop Addin");
			writer.WriteLine ("//");
		}
		
		protected abstract void WriteIncludes (TextWriter writer, IType type);

		protected abstract void WritePrologue (TextWriter writer, String name, String baseName);
		
		protected abstract void WriteProperties (TextWriter writer, IType type);
		
		protected abstract void WriteMethods (TextWriter writer, IType type);
		
		protected abstract void WriteEpilogue (TextWriter writer, String name, String baseName);
		
		protected IEnumerable<IProperty> GetProperties (IType type)
		{
			IList<IProperty> properties = new List<IProperty> ();
			foreach (IProperty property in type.GetProperties()) {
				if (!AttributeHelper.HasAttribute (property, Constants.IBOUTLET)) {
					continue;
				}
				if (!AttributeHelper.HasAttribute (property, Constants.OBJECTIVE_C_IVAR)) {
					continue;
				}
				properties.Add (property);
			}
			return properties;
		}
		
		protected IEnumerable<IMethod> GetMethods (IType type)
		{
			IList<IMethod> methods = new List<IMethod> ();
			foreach (IMethod method in type.GetMethods()) {
				if (!AttributeHelper.HasAttribute (method, Constants.IBACTION)) {
					continue;
				}
				if (!AttributeHelper.HasAttribute (method, Constants.OBJECTIVE_C_MESSAGE)) {
					continue;
				}
				if (method.Parameters.Count != 1) {
					continue;
				}
				methods.Add (method);
			}
			return methods;
		}
		
		protected IType GetBaseType (IType type)
		{
			foreach (IType baseType in type.DirectBaseTypes) {
				if (baseType.Kind != TypeKind.Class) {
					continue;
				}
				IDELogger.Log ("ObjectiveCWriter::GetBaseType -- {0} : {1}", type.Name, baseType.Name);
				return ProjectTypeCache.Get (this.project).ResolveType (baseType);
			}

			return null;
		}
		
		protected bool NeedImport (IType type)
		{
			if (type == null) {
				return false;
			}
			return this.cache.IsInProjectReference(type);
		}
	}
}
